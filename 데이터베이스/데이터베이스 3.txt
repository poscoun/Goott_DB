-- [ DML (Data Manipulation Language) ] : 데이터 조작어
-- 테이블에 새 행을 추가 
-- 테이블에 기존 행을 수정
-- 테이블에서 기존 행을 삭제

-- INSERT 구문 (행 삽입)
-- 1) 새 행 삽입
-- INSERT INTO 테이블명 VALUES (삽입할 데이터);

INSERT INTO DEPT
VALUES (50, 'A', 'B');

-- 2) NULL 값을 가진 행을 삽입
-- 암시적 : 열 리스트에서 열을 생략
INSERT INTO DEPT (DEPTNO, DNAME)
VALUES (60, 'C')

-- 명시적 : VALUES 절에서 NULL 키워드 지정
INSERT INTO DEPT
VALUES (70, 'D', NULL);

-- 3) 특수값 삽입 : 함수 사용 가능
INSERT INTO EMP (EMPNO, HIREDATE)
VALUES (9090, SYSDATE);

-- cf)
SELECT SYSDATE FROM DUAL
UNION ALL
SELECT CURRENT_DATE FROM DUAL;

-- SYSDATE : 시스템에서의 현재 시간을 반환
-- CURRENT_DATE : 현재 세션에서의 현재 시간을 반환

SQL> SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL;

ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';

ALTER SESSION SET TIME_ZONE = '-5:0';

SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL;

-- 4) 특정 날짜 및 시간 삽입 : 변환 함수
ALTER SESSION SET NLS_LANGUAGE = 'AMERICAN';

ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-RR';

INSERT INTO EMP (EMPNO, HIREDATE)
VALUES (9091, SYSDATE);

INSERT INTO EMP (EMPNO, HIREDATE)
VALUES (9092, TO_DATE(SYSDATE, 'DD-MON-RR));

ALTER SESSION SET NLS_DATE_FORMAT = 'RR/MM/DD';

ALTER SESSION SET NLS_LANGUAGE = 'KOREAN';

DELETE FROM EMP WHERE EMPNO IN (9090, 9091, 9092);

-- 5) 스크립트 작성
-- : SQL 문에 &치환을 사용하여 값을 입력하도록 요구
-- : &치환 - &변수값에 대한 위치 표시자
INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (&DEPTNO, '&DNAME', '&LOC');

-- 6) 다른 테이블에서 행 복사해서 삽입
INSERT INTO DEPT (DEPTNO)
 SELECT GRADE FROM SALGRADE
 WHERE GRADE = 1;

-- UPDATE 구문 (데이터 변경)
-- 1) 테이블 행 갱신
-- WHERE 절 無 : 모든 행 갱신
-- WHERE 절 有 : 특정 행 갱신

UPDATE DEPT 
SET DNAME = 'G'
WHERE DEPTNO = 60;

-- 2) 서브쿼리를 사용하여 여러 열 갱신 가능
-- : SET절에 서브쿼리를 여러 개 사용하여 동시에 여러 개의 컬럼값을 변경 가능
-- : 절대 동시에 여러개의 레코드를 갱신하는 것은 아님!

-- 7900 사원의 직책과 급여를 동시에 갱신 <- 7521 사원의 직책의 급여로 갱신
UPDATE EMP
SET JOB = (SELECT JOB
	FROM EMP
	WHERE EMPNO = 7521),
	SAL = (SELECT SAL
	FROM EMP
	WHERE EMPNO = 7521)
WHERE EMPNO = 7900;

-- 문제 : EMP 테이블에서 사번이 7499인 사원과 동일한 직책을 가진 사원들의 SAL 값을 
           7902 사원의 SAL 값으로 변경하시오
SQL> UPDATE EMP
  2  SET SAL = (SELECT SAL
  3     FROM EMP
  4     WHERE EMPNO = 7902)
  5  WHERE JOB = (SELECT JOB
  6     FROM EMP
  7     WHERE EMPNO = 7499);

ROLLBACK; - 데이터 백업

-- 3) 다른 테이블을 기반으로 행 갱신 : 서브쿼리 이용
CREATE TABLE COPY_EMP
AS 
SELECT * FROM EMP;

-- EMP 테이블 기반으로 하여 사원번호가 7934인 사원의 직책과 동일한 사원의 부서번호를 
   현재 7902 사원의 부서번호로 모두 변경한다.
UPDATE COPY_EMP
SET DEPTNO = (SELECT DEPTNO
	FROM EMP
	WHERE EMPNO = 7902)
WHERE JOB = (SELECT JOB
	FROM EMP
	WHERE EMPNO = 7934);

-- 문제 : EMP 테이블을 기반으로 사원번호가 7934인 사원의 매니저와 동일한 부서번호를 가지고 있는
           모든 사원의 부서번호를 현재(COPY_EMP 7902) 사원의 부서번호로 모두 변경하시오
SQL> UPDATE COPY_EMP
  2  SET DEPTNO = (SELECT DEPTNO
  3     FROM EMP
  4     WHERE EMPNO = 7902)
  5  WHERE DEPTNO = (SELECT DEPTNO
  6     FROM EMP
  7     WHERE EMPNO = (SELECT MGR
  8     FROM EMP
  9     WHERE EMPNO = 7934));

-- DELETE 구문 : 행 제거
-- 1) 테이블에서 행 삭제
-- WHERE 절 無 : 테이블 모든 행 삭제
-- WHERE 절 有 : 테이블에서 특정 행 삭제
DELETE FROM DEPT
WHERE DEPTNO = 50;

-- 예외적으로 DELETE 구문은 FROM 생략 가능
DELETE FROM DEPT
WHERE DEPTNO IN (60, 70);

-- 2) 다른 테이블을 기반으로 행 삭제 가능
DELETE FROM COPY_EMP
WHERE DEPTNO = (SELECT DEPTNO
	FROM DEPT
	WHERE DNAME = 'RESEARCH');

ROLLBACK;

-- cf) TRUNCATE 문 (DDL문)
-- : 테이블 구조는 그대로 남겨둔채 모든 행 제거
-- : 단! 롤백이 안되므로 조심해서 사용해야 함
-- 문법 : TRUNCATE TABLE 테이블명;


-----------------------------------------------------------------------------------------------------------
-- [ DDL (Date Definition Language) ] : 데이터 정의어

-- + 데이터베이스 주요 객체
-- 테이블 : 데이터를 저장
-- 뷰      : 하나 이상의 테이블에 있는 데이터의 부분 집합
-- 시퀀스 : 숫자 값을 생성
-- 인덱스 : 일부 질의 성능을 향상
-- 동의어 : 객체에 다른 이름을 부여

-- + 테이블 이름 지정 규칙
-- 1. A - Z, a - z, 0 - 9, _, $, # 사용 가능
-- 2. 첫글자 영문자
-- 3. 예약어 ( DB 에서 약속해 놓은 문자들 ) 사용 X
-- 4. 이름은 의미 있게 생성할 것

-- 1> 테이블 생성
-- : 테이블 생성하려면 유저(개발자)는 CREATE TABEL 권한이 있어야 하며 객체를 생성할 저장 영역이 있어야 함.
-- : DMA(데이터 베이스 관리자)는 DCL(데이터 제어문)문을 사용하여 유저에게 권한을 부여함

-- CREATE TABLE COPY_EMP2
-- (EMPNO NUMBER(4),      
-- ENAME VARCHAR(20),    ------> 최대 4000자 
--           cf) LONG 타입 : 2G 텍스트, LONG RAW : 2G 이미지, BFILE:4G
-- JOB CHAR(20),              ------> 최대 2000자
-- SAL NUMBER(7, 2)
-- HIREDATE DATE)


-- 테이블 생성 시 서브쿼리 사용 가능
CREATE TABLE EMPS
AS 
SELECT * FROM EMP;

-- 문제 : COPPY_EMP3 테이블 생성, 다만 이 테이블은 EMP테이블과 동일한 구조를 갖지만 데이터는 하나도 없는 테이블
SQL> CREATE TABLE COPY_EMP3
  2  AS
  3  SELECT * FROM EMP
  4  WHERE EMPNO = 9999;

-- INSERT 구문도 서브쿼리 사용 가능
SQL> INSERT INTO COPY_EMP3
  2  SELECT * FROM EMP;

-- 2> 테이블 구조 변경 : ALTER TABLE 구문
-- 테이블에 컬럼 추가
ALTER TABLE EMPS
ADD HP VARCHAR(10);

-- 테이블에 컬럼명 변경
ALTER TABLE EMPS
RENAME COLUMN HP TO MP;

-- 테이블 컬럼 정의 수정
ALTER TABLE EMPS
MODIFY MP VARCHAR2(15);

-- 테이블에 컬럼 삭제
ALTER TABLE EMPS
DROP COLUMN MP;

-- 읽기 전용 테이블
-- : READ ONLY 구문을 지정하여 테이블을 읽기 전용 모드로 둘 수 있음
-- : READ ONLY 모드이면 테이블에 영향을 주는 DML문 실행할 수 없음
-- : 테이블의 데이터를 수정하지 않는 한 DDL문 실행할 수 있음
ALTER TABLE EMPS READ ONLY;

-- 읽기 전용 모드 해제
ALTER TABLE EMPS READ WRITE;

-- 3> 테이블 삭제 : DROP TABLE 구문
DROP TABLE EMPS;

-- 테이블 복구(일종의 백업)
-- : DROP 하면 윈도우처럼 DBMS도 RECYCLE BIN(일종의 휴지통)으로 들어가게 됨

SHOW RECYCLEBIN;

FLASHBACK TABLE EMPS
TO BEFORE DROP;

-- 휴지통 비우기
PURGE RECYCLEBIN;

-- cf) DROP TABLE EMPS PURGE : 휴지통을 거치지 않고 바로 삭제 가능 (사용 시 주의 필요)
-- cf) DELETE 구문은 테이블의 ROW들을 지워주는 명령어
--     DROP구문은 테이블을 삭제하는 명령어
--     TRUNCATE구문은 테이블의 ROW들을 지워주는 명령어 - DELETE와 달리 ROLLBACK이 안되므로 더 빨리 삭제가 가능,
--     WHERE 절 사용 X => 부분 삭제가 안됨
-- cf) 읽기 전용 모드인 테이블을 삭제할 수 있음. DROP명령은 데이터 딕셔너리에서만 실행되므로
--     테이블 내용에 엑세스 할 필요가 없기 때문.

-- 4> 테이블 이름 변경
RENAME COPY_EMP2
TO EMPS;

-- 5> 테이블에 주석 달기
COMMENT ON TABLE EMPS
IS 'EMPLOYEE TABLE';

-- 주석은 Data Dictionary에서 확인할 수 있음
DESC USER_TAB_COMMENTS

SELECT * FROM  USER_TAB_COMMENTS;

+ DDL 성질
-- 1. 동시성
-- : 동시 공유
-- : 동시성 제어 - 트랜젝션(commit, rollback, savepoint) ex) 은행 계좌이체..

-- 2. 무결성
-- : 무결성을 만족시키려면 DDL, DML문을 사용할 때 테이블 조건을 만족할 때만 실행될 수 있도록 하면 됨
-- 제약 조건 : 1) PRIMARY KEY : (필수) 권장사항
                  2) NOT NULL
                  3) CHERCK
                  4) UNIQUE
	      5) FOREIGN KEY

EX) EMP, DEPT 테이블
EMPNO : NULL(X), 중복 X       - PRIMARY KEY
ENAME : NULL(X), 중복 O       - NOT NULL 
SAL      : 0 보다는 커야 한다.  - CHECK 
DEPTNO : 부서테이블 중 하나  - FOREIGN KEY
=======================================
DEPTNO : NULL(X),중복(X)      - PRIMARY KEY   
DNAME : 중복(X), 고유          - UNIQUE

----------------------------------------------------------------------------------------------------
-- +제약 조건 정의
-- : (권장) 제약명을 생략하면 SYS_C숫자형으로 임시 부여하므로 제약명을 유의미있게 적어주는 것을 권장

-- 1) 컬럼레벨 정의 방식
-- : 컬럼명 DATATYPE [ CONSTRAINT 제약명 ] 제약 종류

CREATE TABLE DEPT1
(DEPTNO NUMBER(2) PRIMARY KEY,
DNAME VARCHAR2(20) UNIQUE,
LOC VARCHAR2(20));

-- 2) 테이블 레벨 정의 방식
컬럼명 DATATYPE 제약명 제약종류 (컬럼명),
컬럼명 DATATYPE 제약명 제약종류 (컬럼명),
컬럼명 DATATYPE 제약명 제약종류 (컬럼명),

CREATE TABLE EMP1
(EMPNO NUMBER(4) CONSTRAINT EMP1_EMPNO_PK PRIMARY KEY,
ENAME VARCHAR2(20) NOT NULL,
SAL NUMBER(7, 2),
DEPTNO NUMBER(2), 
CONSTRAINT EMP1_SAL_CK CHECK (SAL BETWEEN 500 AND 5000),
CONSTRAINT EMP1_DEPTNO_FK FOREIGN KEY (DEPTNO) REFERENCES DEPT1(DEPTNO)); 

INSERT INTO DEPT1
VALUES(1, '영업', '서울');

INSERT INTO DEPT1
VALUES(2, '회계', '부산');

INSERT INTO DEPT1
VALUES(3, '관리', '대전');


INSERT INTO EMP1
VALUES (1111, 'HONG' , 3000, 1);

INSERT INTO EMP1
VALUES (2222, 'YU' , 6000, 2);

-- DEPT1 테이블 LOC 컬럼에 UNIQUE 제약을 부여
ALTER TABLE DEPT1
ADD CONSTRAINT DEPT1_LOC_UQ UNIQUE(LOC);

-- 제약 조건 조회 : data dictionary를 통해 조회
DESC USER_CONSTRAINTS;

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, SEARCH_CONDITION
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('EPM1', 'DEPT1');

-- 제약 조건 삭제
ALTER TABLE DEPT1
DROP CONSTRAINT DEPT1_LOC_UQ;

-- user1 삭제
drop user user1;

-- drop user user1 cascade - 혹시 삭제가 안되면 사용
-- pw 변경

SQL> create user user1
  2  identified by tiger;

SQL> grant connect, resource to user1;

SQL> alter user user1
  2  identified by lion;

-- password 변경 요구
conn system/oracle

show user

create user user2
identified by tiger
password expire
account unlock;

grant connect, resource to user2;

conn user2/tiger

-- 계정이 존재는 하지만 접근은 안 되게(로그인 금지)
QL> conn system/oracle
Connected.
SQL> show user
USER is "SYSTEM"
SQL> alter user user2
  2  account lock;

User altered.

SQL> conn user2/lion
ERROR:
ORA-28000: the account is locked


Warning: You are no longer connected to ORACLE.
SQL> show user
USER is ""
SQL> --잠긴 계정 활성화
SQL> conn system/oracle
Connected.
SQL> show user
USER is "SYSTEM"
SQL> alter user user2
  2  account unlock;

User altered.
-------------------------------------------------------------------------------------------------------

-- Data Dictionary
-- 구성 : 접두사 + 관심keyward + 복수형
-- user_ : 유저가 생성한 것과 관련된 정보
-- all_ : 접근 권한과 관련된 정보
-- dba_ : db 관리자가 보는 정보
SQL> select username, password
  2  from dba_users;
-- V$_ : 동적이면서 성능과 관련된 정보

-- 문자를 저장하는 타입 
-- char : 고정형 문자  
-- varchar : 가변형 문자

ex) char(8) :    A  |  B  |  C  |     |      |      |     |     |
  => 장점 :  read할 때 효율적
  => 단점 : 공간 사용 비효율적

varchar(8) :     A  |  B  |  C  |     
  => 장점 : 공간 사용 효율적
  => 단점 : read 할 때 비효율적

cf) 현재는 varchar로 선언해도 자동으로 varchar2로 바꿔줌

-- DCL (Data Control Language)
-- 오라클 서버 DB 사용자
-- SYS : 소유자
-- SYSTEM : 관리자
-- End-User : 최종 사용자 ( ex. scott ...)

-- user1 계정 생성
create user user1
identified by tiger;

-- 권한
-- 1. system : 시스템에 영향을 미치는 권한 : grant 권한 to 사용자명;
--                                                     revoke 권한 from 사용자명;
--	    : SYS or SYSTEM 이 권한을 가짐
-- 2. object : 해당 object에만 영향을 미치는 권한 : grant 권한 on object명 to 사용자명; 
-- 					   revoke 권한 on object명 from 사용자명;
-- 	   : object 생성자가 권한을 가짐
-- grant 권한 to 사용자명
grant connect, resource to user1;

-- 권한 회수
revoke select, update on emp from user1;

-- 문제 :  id - 20자, pw - 20자 가 필요한 테이블, 이 테이블에는 한명 (aaa, bbb)이 있습니다.
-- 이 테이블을 scott이 접근할 수 있도록 해보세요. 테이블명 : t1
 CREATE TABLE t1
  2  (id varchar(20),
  3  pw varchar(20));

SQL> INSERT INTO t1 (id, pw)
  2  VALUES ('aaa', 'bbb');

---------------------------------------------------------------------------------------------------